'use strict';

var dsConfig = require('../datasources.json');
var urlTest = "http://127.0.0.1:3001";
//GOOGLE LOGIN
var express = require( 'express' )
var app = express()
var server = require( 'http' ).createServer( app ) 
var passport = require( 'passport' )
var util = require( 'util' )
var bodyParser = require( 'body-parser' )
var cookieParser = require( 'cookie-parser' )
var session = require( 'express-session' )
var RedisStore = require( 'connect-redis' )( session )
var GoogleStrategy = require( 'passport-google-oauth2' ).Strategy;

var GOOGLE_CLIENT_ID = "468311304566-p8esimkvshrmmchgmdnfctvrf7ruqpgo.apps.googleusercontent.com"
var GOOGLE_CLIENT_SECRET = "M08pKg5uY2RI8k2vc4JCA1PS";

// Passport session setup.
//   store the user ID when serializing, and find the user by ID when deserializing.
//use the user database if the complete Google profile is serialized and deserialized works
passport.serializeUser(function(user, done) {
  done(null, user);
});

passport.deserializeUser(function(obj, done) {
  done(null, obj);
});


// Use the GoogleStrategy within Passport.
//   Strategies in Passport require a `verify` function, which accept
//   credentials (in this case, an accessToken, refreshToken, and Google
//   profile), and invoke a callback with a user object.
passport.use(new GoogleStrategy({
    clientID:     GOOGLE_CLIENT_ID,
    clientSecret: GOOGLE_CLIENT_SECRET,
    //Carefull ! and avoid usage of Private IP, otherwise you will get the device_id device_name issue for Private IP during authentication
    //The workaround is to set up thru the google cloud console a fully qualified domain name such as http://mydomain:3000/ 
    //then edit your /etc/hosts local file to point on your private IP. 
    //Also both sign-in button + callbackURL has to be share the same url, otherwise two cookies will be created and lead to lost your session
    //if you use it.
    callbackURL: "http://localhost:3000/auth/google/callback",
    passReqToCallback   : true
  },
  function(request, accessToken, refreshToken, profile, done) {
    // asynchronous verification, for effect...
    process.nextTick(function () {
      
      // the user's Google profile is returned to represent the logged-in user 
      // associate the Google account with a user record in your database and return that user instead.
      return done(null, profile);
    });
  }
));
// configure Express

app.use( express.static(__dirname + '/public'));
app.use( cookieParser()); 
app.use( bodyParser.json());
app.use( bodyParser.urlencoded({extended: true}));

app.use( passport.initialize());
app.use( passport.session());

module.exports = function(app) {
var User = app.models.userData;

  //send an email with instructions to reset an existing user's password
  app.post('/request-password-reset', function(req, res, next) {
    User.resetPassword({
      email: req.body.email
    }, function(err) {
      if (err) return res.status(401).send(err);
        res.redirect('/response');//check in final build
/*      res.render('response', {
        title: 'Password reset requested',
        content: 'Check your email for further instructions',
        redirectTo: urlTest + '/',
        redirectToLinkText: 'Log in'
      });*/
    });
  });

  //show password reset form
  app.get('/reset-password', function(req, res, next) {
    if (!req.accessToken) return res.sendStatus(401);
    res.render('password-reset', {
      redirectUrl: '/api/userData/reset-password?access_token='+
        req.accessToken.id
    });
  });


app.get('/', function(req, res){
  res.render('index', { user: req.user });
});

app.get('/account', ensureAuthenticated, function(req, res){
  res.render('account', { user: req.user });
});

app.get('/login', function(req, res){
  res.render('login', { user: req.user });
});

// GET /auth/google
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  The first step in Google authentication will involve
//   redirecting the user to google.com.  After authorization, Google
//   will redirect the user back to this application at /auth/google/callback
app.get('/auth/google', passport.authenticate('google', { scope: [
       'https://www.googleapis.com/auth/plus.login',
       'https://www.googleapis.com/auth/plus.profile.emails.read'] 
}));

// GET /auth/google/callback
//   Use passport.authenticate() as route middleware to authenticate the
//   request.  If authentication fails, the user will be redirected back to the
//   login page.  Otherwise, the primary route function function will be called,
//   which, in this example, will redirect the user to the home page.
app.get( '/auth/google/callback', 
      passport.authenticate( 'google', { 
        successRedirect: '/',
        failureRedirect: '/login'
}));

app.get('/logout', function(req, res){
  req.logout();
  res.redirect('/');
});

server.listen( 3000 );


// Simple route middleware to ensure user is authenticated.
//   Use this route middleware on any resource that needs to be protected.  If
//   the request is authenticated (typically via a persistent login session),
//   the request will proceed.  Otherwise, the user will be redirected to the
//   login page.
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) { return next(); }
  res.redirect('/login');
}
  
  
}